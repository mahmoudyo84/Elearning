# Generated by Django 5.1.4 on 2024-12-18 17:24

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Categories',
            fields=[
                ('CategoryID', models.AutoField(primary_key=True, serialize=False)),
                ('CategoryName', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='CourseDetails',
            fields=[
                ('DetailsID', models.AutoField(primary_key=True, serialize=False)),
                ('Title', models.CharField(max_length=255)),
                ('Description', models.TextField()),
                ('Duration', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Roles',
            fields=[
                ('RoleID', models.AutoField(primary_key=True, serialize=False)),
                ('RoleName', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Screens',
            fields=[
                ('ScreenID', models.AutoField(primary_key=True, serialize=False)),
                ('Name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('groups', models.ManyToManyField(blank=True, related_name='customuser_set', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='customuser_permissions', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CourseMedia',
            fields=[
                ('MediaID', models.AutoField(primary_key=True, serialize=False)),
                ('MediaFile', models.FileField(upload_to='course_media/')),
                ('DetailID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='project.coursedetails')),
            ],
        ),
        migrations.CreateModel(
            name='Courses',
            fields=[
                ('CourseID', models.AutoField(primary_key=True, serialize=False)),
                ('CourseName', models.CharField(max_length=255)),
                ('CategoryID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='project.categories')),
            ],
        ),
        migrations.AddField(
            model_name='coursedetails',
            name='CourseID',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='project.courses'),
        ),
        migrations.CreateModel(
            name='CoursesExams',
            fields=[
                ('ExamID', models.AutoField(primary_key=True, serialize=False)),
                ('Tile', models.CharField(max_length=255)),
                ('Description', models.TextField()),
                ('Degree', models.IntegerField()),
                ('Open', models.BooleanField(default=False)),
                ('Duration', models.IntegerField()),
                ('CourseID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='project.courses')),
            ],
        ),
        migrations.CreateModel(
            name='ExamsQuestions',
            fields=[
                ('QuestionID', models.AutoField(primary_key=True, serialize=False)),
                ('Question', models.TextField()),
                ('Point', models.IntegerField()),
                ('ExamID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='project.coursesexams')),
            ],
        ),
        migrations.CreateModel(
            name='QuestionsChoices',
            fields=[
                ('ChoiceID', models.AutoField(primary_key=True, serialize=False)),
                ('Choice', models.CharField(max_length=255)),
                ('Right', models.BooleanField()),
                ('ExamID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='project.coursesexams')),
                ('QuestionID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='project.examsquestions')),
            ],
        ),
        migrations.CreateModel(
            name='Privileges',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Action', models.CharField(max_length=255)),
                ('RoleID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='project.roles')),
                ('ScreenID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='project.screens')),
            ],
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('UserID', models.AutoField(primary_key=True, serialize=False)),
                ('Username', models.CharField(max_length=255, unique=True)),
                ('Name', models.CharField(max_length=255)),
                ('Email', models.EmailField(max_length=255)),
                ('Mobile', models.CharField(max_length=14)),
                ('RegisterDate', models.DateField()),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('RoleID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='project.roles')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserCourses',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('RegisterDate', models.DateField()),
                ('CourseID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='project.courses')),
                ('UserID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='project.users')),
            ],
        ),
        migrations.CreateModel(
            name='ExamAnswer',
            fields=[
                ('AnswerID', models.AutoField(primary_key=True, serialize=False)),
                ('Right', models.BooleanField()),
                ('ExamID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='project.coursesexams')),
                ('QuestionID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='project.examsquestions')),
                ('ChoiceID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='project.questionschoices')),
                ('UserID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='project.users')),
            ],
        ),
        migrations.AddField(
            model_name='coursedetails',
            name='UserID',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='project.users'),
        ),
        migrations.CreateModel(
            name='UsersExams',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Degree', models.IntegerField()),
                ('ExamID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='project.coursesexams')),
                ('UserID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='project.users')),
            ],
        ),
    ]
